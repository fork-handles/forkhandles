buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath Libs.kotlin_gradle_plugin
        classpath Libs.coveralls_gradle_plugin
        classpath Libs.com_jfrog_bintray_gradle_plugin
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version "2.10.1"
    id "com.jfrog.bintray" version "1.8.4"
    id 'de.fayard.buildSrcVersions' version "0.7.0"
}

allprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    jacoco {
        toolVersion = '0.8.3'
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileKotlin.kotlinOptions.useIR = true
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.useIR = true
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'LOCAL'
    group = 'dev.forkhandles'


    test {
        useJUnitPlatform()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode('name', archivesBaseName)
                    asNode().appendNode('description', description)
                    asNode().appendNode('url', 'https://forkhandles.dev')
                    asNode().appendNode('developers')
                            .appendNode('developer').appendNode('name', 'Nat Pryce').parent().appendNode('email', 'nat@forkhandles.dev')
                            .parent().parent()
                            .appendNode('developer').appendNode('name', 'David Denton').parent().appendNode('email', 'david@forkhandles.dev')
                    asNode().appendNode('scm').
                            appendNode('url', 'git@github.com:fork-handles/forkhandles.git').parent().
                            appendNode('connection', 'scm:git:git@github.com:fork-handles/forkhandles.git').parent().
                            appendNode('developerConnection', 'scm:git:git@github.com:fork-handles/forkhandles.git')
                    asNode().appendNode('licenses').appendNode('license').
                            appendNode('name', 'Apache License, Version 2.0').parent().
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
                }
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')

        publications = ['mavenJava']
        dryRun = false
        publish = true
        pkg {
            repo = 'maven'
            userOrg = 'fork-handles'
            name = project.name

            desc = description
            websiteUrl = 'https://forkhandles.dev'
            issueTrackerUrl = 'https://github.com/fork-handles/forkhandles/issues'
            vcsUrl = 'https://github.com/fork-handles/forkhandles.git'
            licenses = ['Apache-2.0']
            labels = []
            publicDownloadNumbers = true
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = false
                    user = System.getenv('SONATYPE_USER')
                    password = System.getenv('SONATYPE_KEY')
                    close = '1'
                }
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                       'Implementation-Vendor': 'dev.forkhandles',
                       'Implementation-Version': project.version
        }
    }
}

compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += "-Xjvm-default=enable"
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(subprojects.findAll { it.name != 'forkhandles-bom' }.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

dependencies {
    compile project(":bunting4k")
    compile project(":tuples4k")
}

sourceSets {
    test {
        kotlin {
            srcDirs 'src/test/kotlin'
            srcDirs 'src/docs'
        }
        resources {
            srcDir 'src/docs'
        }
    }
}

buildSrcVersions {
    indent = "    "
}

// To update Gradle, run `$ ./gradlew :buildSrcVersions && ./gradlew wrapper`
wrapper {
    gradleVersion = Versions.gradleLatestVersion
    distributionType = Wrapper.DistributionType.ALL
}
