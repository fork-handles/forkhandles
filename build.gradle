buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath Libs.kotlin_gradle_plugin
        classpath Libs.coveralls_gradle_plugin
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version "2.10.1"
    id 'de.fayard.buildSrcVersions' version "0.7.0"
    id "io.codearte.nexus-staging" version '0.22.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version "1.5.0"
}

apply plugin: 'io.codearte.nexus-staging'

allprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    jacoco {
        toolVersion = '0.8.6'
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'LOCAL'
    group = 'dev.forkhandles'

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects {

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                'Implementation-Vendor': 'dev.forkhandles',
                'Implementation-Version': project.version,
                'forkhandles_version': archiveVersion
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
        archives sourcesJar, javadocJar
    }

    def enableSigning = project.findProperty('sign') == "true"

    apply plugin: 'maven-publish' // required to configure bintray
    apply plugin: 'maven' // required to upload to sonatype

    if (enableSigning) { // when added it expects signing keys to be configured
        apply plugin: 'signing'

        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")

            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }

    def nexusUsername = project.findProperty('nexusUsername') ?: "notset"
    def nexusPassword = project.findProperty('nexusPassword') ?: "notset"

    publishing {
        repositories {
            maven {
                name 'SonatypeStaging'
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            maven {
                name 'SonatypeSnapshot'
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode('name', archivesBaseName)
                    asNode().appendNode('description', description)
                    asNode().appendNode('url', 'https://forkhandles.dev')
                    asNode().appendNode('developers')
                        .appendNode('developer').appendNode('name', 'Nat Pryce').parent().appendNode('email', 'nat@forkhandles.dev')
                        .parent().parent()
                        .appendNode('developer').appendNode('name', 'David Denton').parent().appendNode('email', 'david@forkhandles.dev')
                        .parent().parent()
                        .appendNode('developer').appendNode('name', 'Dmitry Kandalov').parent().appendNode('email', 'dmitry@forkhandles.dev')
                        .parent().parent()
                        .appendNode('developer').appendNode('name', 'Duncan McGregor').parent().appendNode('email', 'duncan@forkhandles.dev')
                    asNode().appendNode('scm').
                        appendNode('url', 'git@github.com:fork-handles/forkhandles.git').parent().
                        appendNode('connection', 'scm:git:git@github.com:fork-handles/forkhandles.git').parent().
                        appendNode('developerConnection', 'scm:git:git@github.com:fork-handles/forkhandles.git')
                    asNode().appendNode('licenses').appendNode('license').
                        appendNode('name', 'Apache License, Version 2.0').parent().
                        appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
                }
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += "-Xjvm-default=enable"
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(subprojects.findAll { it.name != 'forkhandles-bom' }.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

dependencies {
    subprojects
        .forEach {
            api project(it.name)
        }
}

sourceSets {
    test {
        kotlin {
            srcDirs 'src/test/kotlin'
            srcDirs 'src/docs'
        }
        resources {
            srcDir 'src/docs'
        }
    }
}

buildSrcVersions {
    indent = "    "
}

// To update Gradle, run `$ ./gradlew :buildSrcVersions && ./gradlew wrapper`
wrapper {
    gradleVersion = Versions.gradleLatestVersion
    distributionType = Wrapper.DistributionType.ALL
}

